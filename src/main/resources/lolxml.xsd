<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://lolxml.org"
	xmlns:lol="http://lolxml.org" elementFormDefault="qualified">

	<!-- Support lookup data. Not optional anymore, it inits XPath evaluator.
		Can be empty, though. -->
	<complexType name="dataType">
		<sequence>
			<any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	
	<!-- Template for mixed element (right term of production)  -->

	<complexType name="rightElement" mixed="true">
		<sequence minOccurs="0" maxOccurs="unbounded">
			<choice>
				<element name="exp" type="lol:expType"/>
				<element name="switch" type="lol:switchType" />
				<element name="eval" type="lol:evalType" />
				<element name="store" type="lol:storeType" />
				<element name="foreach" type="lol:foreachType" />
				<element name="if" type="lol:ifType" />
				<element name="while" type="lol:whileType" />
				<any namespace="##other" processContents="lax"/>
				<any namespace="##local" processContents="lax"/>
			</choice>
		</sequence>
	</complexType>


	<!-- Non-terminal symbol. Evaluates its content when referenced. -->
	<complexType name="symType">
		<complexContent>
			<extension base="lol:rightElement">
				<attribute name="id" use="required" type="ID" />
			</extension>
		</complexContent>
	</complexType>


	<!-- Random chooser for production rules. -->
	<complexType name="switchType">
		<sequence>
			<element name="case" minOccurs="1" maxOccurs="unbounded"
				type="lol:rightElement" />
		</sequence>
	</complexType>

	<!-- Iterate through nodeset specified by inline XPath (select), referenced
	 	Exp (idref) or stored in property (property), and evaluate content.
	 	Exposes active node as property (name declared in "var" attribute). -->
	<complexType name="foreachType">
		<complexContent>
			<extension base="lol:rightElement">
				<attribute name="idref" type="IDREF" />
				<attribute name="select" type="string" />
				<attribute name="property" type="NMTOKEN" />
				<attribute name="var" type="NMTOKEN" />
			</extension>
		</complexContent>
	</complexType>

	
	<!-- Conditional evaluator specified by inline boolean XPath (test), 
	referenced boolean Exp (idref) or stored in property (property). -->
	<complexType name="ifType">
		<complexContent>
			<extension base="lol:rightElement">
				<attribute name="idref" type="IDREF" />
				<attribute name="test" type="string" />
				<attribute name="property" type="NMTOKEN" />
			</extension>
		</complexContent>
	</complexType>
	
	<!-- Conditional loop specified by inline boolean XPath (test), 
	referenced boolean Exp (idref) or stored in property (property). -->

	<complexType name="whileType">
		<complexContent>
			<extension base="lol:rightElement">
				<attribute name="idref" type="IDREF" />
				<attribute name="test" type="string" />
				<attribute name="property" type="NMTOKEN" />
			</extension>
		</complexContent>
	</complexType>
	
	<!-- Evaluation: references symbols, expressions and properties-->
	<complexType name="evalType">
		<attribute name="idref" type="IDREF" />
		<attribute name="property" type="NMTOKEN" />
	</complexType>
	
	<!-- Evaluates XPath expression in @value (using data element as context).
	-->
	<complexType name="expType">
		<complexContent>
			<extension base="lol:rightElement">
				<attribute name="id" type="ID" />
				<attribute name="value" type="normalizedString" use="required" />
			</extension>
		</complexContent>
	</complexType>

	<simpleType name="expTypes">
		<restriction base="string">
			<enumeration value="string"/>
			<enumeration value="boolean"/>
			<enumeration value="node"/>
			<enumeration value="nodeset"/>
			<enumeration value="number"/>
		</restriction>
	</simpleType>
	
	<!-- Store the result of either an inline XPath (if select + type are present),
		a referenced Exp/Sym (if idref is present), or nested content, 
		into a document property. Properties are global, and can 
		be overwritten. -->
	<complexType name="storeType">
		<complexContent>
			<extension base="lol:rightElement">
				<attribute name="property" type="NMTOKEN" use="required" />
				<attribute name="idref" type="IDREF" />
				<attribute name="select" type="string" />
				<attribute name="type" type="lol:expTypes" default="string" />
			</extension>
		</complexContent>
	</complexType>
	
	<!-- Root element. Grammar= data*, sym+, var*, eval -->
	<element name="grammar">
		<complexType>
			<sequence>
				<element name="data" type="lol:dataType" />
				<element name="exp" type="lol:expType" minOccurs="0" maxOccurs="unbounded" />
				<element name="sym" type="lol:symType" minOccurs="1" maxOccurs="unbounded" />
				<element name="eval" type="lol:evalType" maxOccurs="1" minOccurs="1"/>
			</sequence>
		</complexType>
	</element>

</schema>